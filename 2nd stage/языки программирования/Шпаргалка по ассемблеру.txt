Различные инструкции:
Инструкции перемещения данных:
. MOV op1, op2 - записывает в op1 значение op2. Хотя бы 1 из операднов должен быть регистром - не можеть брать значения из памяти и записывать их в другую ячейку памяти. Операнды должны быть 1 размера

Арифметические инструкции:
. ADD op1, op2 - складывает op1 и op2, записывает результат в op1
. SUB op1, op2 - вычитает из op1 op2, записывает результат в op1
. SAR (SAL) op1, op2 - сдвигает вправо (влево) op1 столько раз, сколько записано в op2. При сдвиге влево заполняет младшие биты 0-ями. При сдвиге вправо старший бит сохраняется после сдвига (то есть, был 0, останется 0, был 1 останется 1). Флаг OF изменяется только в случае сдвига на 1 бит (для больших сдвигов он не определён) - он равен 1, если старший бит изменился и 0, если нет. Флаг CF равняется последнему вышедшему за пределы биту, флаги ZF, PF, SF устанавливаются по результатам вычисления, AF - неопределён.
. SHL (SHR) op1, op2 - делает тоже самое, что и SAR (SAL), НО CF равен старшему биту op1 до начала сдвига!
. XOR op1, op2 - делает побитовое логическое ИСКЛЮЧЕЮЩИЕ ИЛИ (полином жегалкина) и сохраняет результат в op1.

Инструкции перехода
. SYSCALL - вызывает системную функцию с кодом, записанным в rax. Для системных вызовов (syscall) 4-ый аргумент храниться в r10, а не rcx! Системные функции не могут принимать больше 6 аргументов!
. CALL metka (address) - переход на метку или адрес. Записывает в стек [свой адрес + 1] (так называемый адрес возврата (return address)), это нужно, чтобы, когда функция закончилась командой ret, программа знала, откуда продолжить своё выполнение. Функция может принимать неограниченое количество аргументов, первые 6 записываются в rdi, rsi, rdx, rcx, r8 и r9, остальное передаётся в стек в обратном порядке. 
. RET - возвращает из функции туда, откуда наз вызвали (return), возвращаемые значения сохранять в rax, rdx (и других caller регистрах)
. JMP metka	- переходит на метку (metka) без условий
. JZ/JE metka	- переходит, если - A == B (ZF == 0) (числа равны)
. JNZ/JNE metka	- переходит, если - A != B (ZF != 0) (числа не равны)
. JA/JNVE metka	- переходит, если A > B (A строго больше B)
. JG/JNLE metka - переходит, если A > B (A строго больше B)	; По сути одни и те же инструкции, но применяются в разных местах, чтобы придать коду контекст и сделать его более читаемым 
. JAE/JNB metka	- переходит, если A >= B (A больше или равно B)
. JGE/JNL metka - переходит, если A >= B (A больше или равно B)
. JB/JBNE metka	- переходит, если A < B (A строго меньше B)
. JL/JNGE metka - переходит, если A < B (A строго меньше B)
. JBE/JNA metka	- переходит, если A <= B (A меньше или равно B)
. JLE/JNG metka - переходит, если A <= B (A меньше или равно B)
. JC metka 	- переходит, если (CF == 1)
. JNC metka	- переходит, если (CF == 0)
. JO metka	- переходит, если (OF == 1)
. JNO metka	- переходит, если (OF == 0)
. JS metka	- переходит, если (SF == 1)
. JNS metka	- переходит, если (SF == 0)

Инструкции сравнения:
. TEST op1, op2 - выполняет побитовое ЛОГИЧЕСКОЕ И между op1 и op2 [op1 & op2], результат может изменить флаги [ZF, SF, PF], команда всегда сбрасывает флаги [OF, CF]. Результат никуда не сохраняется
. CMP op1, op2 - выстовляет флаги по результату выражения [op1 - op2]

Инструкции вычисления адреса:
. LEA op1, op2 - вычисляет эффективный адрес[1] op2 и записывает его в op1. op1 - только регистр, а op2 - только ячейка памяти (переменная). Вычисляет адрес в любое время
. OFFSET op1 - возвращает смещение метки данных (переменной) op1 относительно начала сегмента данных. Под смещением понимается какое количество байтов отделяет метку данных от начала сегмента. Вычисляет адрес во время компиляции

Инструкции для работы со стеком:
. PUSH op1 - помещает в вершину стека операнд op1, вершина смещается на +1
. POP op1 - копирует вершину стека в операнд op1, вершина смещается на -1

Непонятные термины.
- [1]  Эффективный адрес - это любой операнд инструкции с ссылкой на память (смещением от текущего адреса). Эффективныйе адреса в NASM имеют очень простой синтаксис, они содержат выражение (в квадратных скобках) в результате вычислений которого получиться нужный адрес. Например:
wordvar   dw 123 
     mov ax, [wordvar] ; ссылка на первый элемент wordvar
     mov ax, [wordvar+1] ; ссылка на второй элемент wordvar
- [2] Директивы - это "языковая конструкция", которая не является командой, но учавствует в процессе компиляции. При помощи директивы мы сообщаем компилятору дополнительную информацию. Например:
section .data - начинается секция .data
global _start - объявлена глобальная метка _start
message db: "some", 10 - создаётся "строка", символы которой занимают в памяти 1 байт
- [3] Дескриптор - Unix индентефицирует файл по дескриптору, как только тот открывается программой. Дескриптер имеет целочисленное значение (например 42 или 999). Дескриптеры 0, 1 или 2 используются для "общения" с программой. 0 - поток ввода (stdin), 1 - поток вывода (stdout), 2 - поток ошибок и информация о процессе (stderr)


Полезная инфа:
-/- Caller-saved registers (не важные!) И Callee-saved registers (пздц какие важные!) (путающая штука):
# Caller-saved registers, они же non-volatile registers (не изменчивые регистры) или call-preserved (сохраняемые при вызове) - используются при хранении долговременных значений, которые должны сохраняться при вызовах (все остальные регистры (rax, rcx, rdx, rsi, rdi, r8-r11) - всего 9 регистров)
Можете сохранить их значение через стек, а можете и не сохранять - как хотите
# Callee-saved registers, они же volatile registers (изменчивые регистры) или call-clobbered (с блокировкой вызова) - используются для хранения временных значений, которые не обязательно сохранять при вызовах функций (rbx, rbp, rsp, r12-r15 - всего 7 регистров)
Либо эти регистры не трогают, либо, если трогают, то перед командой RET их значение должно быть восстановлено на то, которое было сразу после команды CALL

-/- Младшие версии r0 - r3:
rax - 64 бита (всё слово)
eax - 32 бита (младшие)
ax  - 16 бит  (младшие)
axh - 8  бит  (старшие 8 бит ax)
axl - 8  бит  (младшие)

-/- Младшие версии r4 - r7:
rbp - 64 бита (всё слово)
ebp - 32 бита (младшие)
bp  - 16 бит  (младшие)
bpl - 8  бит  (младшие)

-/- Размеры слов для переменных:
db - 1 символ = 1 байт (byte)
dw - 1 символ = 1 слово = 2 байта (word)
dd - 1 символ = 1 двойное слово = 2 слова = 4 байта (double word)
dq - 1 символ = 1 четверное слово = 2 двойного слова = 4 слова = 8 байт (quatre word)

-/- Запрос малых частей регистров r0 - r15:
d - младшие 32 бита (r4d)
w - младшие 16 бит  (r11w)
b - младшие 8  бит  (r0b)

-/- Регистры, которые используют команда syscall:
rdi, rsi, rdx, r8, r9, r10
rax - указывает команду, которую должен выполнить syscall
-/- Регистры, которые изменяет syscall
rcx, r11

-/- Запись чисел в различных системах счисления:
0A2h            ; шестнадцатеричная	(на конце добавляем h - hex)
$0A2            ; шестнадцатеричная	(через знак доллара, однако первый символ после $ должен быть цифрой, чтобы NASM не перепутал число с индентификатором) 
0xA2            ; шестнадцатеричная	(по классике 0x...)
100             ; десятичная		(просто число обычными цифрами)
777q            ; восьмеричная		(на конце добавляем q - ?)
777o		; восьмеричная		(на конце добавляем o - octal)
10010011b       ; двоичная		(на конце добавляем b - binary)

-/- Регистры:
Ассемблеру поифгу на регистры букв, НО не в именах меток и секций
mov, mOv, MOV - одно и тоже
0xa1, 0xA1 - одно и тоже
_start, _START - совершенно разные вещи
.data, .DATA - совершенно разные вещи

-/- Метки - Глобальные и Локальные:
Глобальные метки начинаются с знака "_" - _name (или написать просто name, без ничего)
Внутри одной глобальной метке можно указывать локальные, они начинаются с знака "." - .name
Это очень удобно, тк локальные метки позволяют избежать конфликта имён, а также позволяют удобнее навигироваться в программе - _name.name - указывает на локальную метку .name в глобальной метке _name

-/- Относительная адресация:
lea rsi, [codes + rax] - квадратные скобки обозначают косвенную адресацию (получим адрес элемента + rax)
mov rsi, rax - копирует rax в rsi
mov rsi, [rax] - копирует содержимое памяти (8 последовательных байт), начиная с адреса, сохранённого в rax. Почему 8? Потому что команда для команды MOV операнды должны быть одного размера, а rsi имеет размер 8 байт

-/- Неявные использования регистров системой:
rsp - указывает на вершину стека
rcx - неявно используется SYSCALL-ом
rax - SYSCALL неявно использует значение для определения системной функции

Ошибки нубов ассемблера:
> Регистры по умолчанию не обнулены
> Вызвать RET, если стек не находиться в том же состоянии, что и при запуске функции
> Если вы поменяли Callee-saved register, то поменяйте их обратно
> Если вам нужен Caller-saved register после функции, то заранее сохраните его